[tox]
minversion = 3.9.0
envlist =
    lint
    docs
    packaging
    py{38,39}-{ansible212,devel}

requires =
    virtualenv >= 20.14.0
    pip >= 22.0.4
# do not enable skip missing to avoid CI false positives
skip_missing_interpreters = False
isolated_build = True

[testenv]
usedevelop = True
# do not put * in passenv as it may break builds do to reduced isolation
passenv =
    CI
    CONTAINER_*
    DOCKER_*
    GITHUB_*
    HOME
    PODMAN_*
    PYTEST_*
    SSH_AUTH_SOCK
    TERM
setenv =
    ANSIBLE_CONFIG={toxinidir}/dev/null
    ANSIBLE_DISPLAY_FAILED_STDERR=1
    ANSIBLE_VERBOSITY=1
    # enabling pipelineing as it was known to break podman module in order
    # versions, added here as a safety measure to prevent regression.
    ANSIBLE_PIPELINING=1
    PYTHONDONTWRITEBYTECODE=1
    PYTHONUNBUFFERED=1
    # new resolve a must or test extras will not install right
    MOLECULE_NO_LOG=0
deps =
    py{,38,39}-{!devel}: molecule[test]>=3.5.0
    py{,38,39}-{devel}: git+https://github.com/ansible-community/molecule.git@main#egg=molecule[test]
    ansible212: ansible-core>=2.12.4,<2.13.0
    dockerfile: ansible-core>=2.12.4
    selinux
commands_pre =
    # No need to bother starting tests if these are now working
    - podman system connection list
    - podman info
commands =
    # this should mention oldest version we find acceptable for runtime
    ansible-galaxy collection install -r requirements.yml
    # for devel we need to use unreleased version
    ansibledevel: ansible-galaxy collection install git+https://github.com/containers/ansible-podman-collections
    # failsafe as pip may install incompatible dependencies
    pip check
    # failsafe for preventing changes that may break pytest collection
    sh -c "PYTEST_ADDOPTS= python -m pytest -p no:cov --collect-only 2>&1 >{envlogdir}/collect.log"
    python -m pytest {posargs:-l}

whitelist_externals =
    ansible-galaxy
    find
    podman
    rm
    sh

[testenv:lint]
description = Runs all linting tasks
commands_pre =
commands =
    # to run a single linter you can do "pre-commit run flake8"
    python -m pre_commit run {posargs:--all}
deps = pre-commit>=1.18.1
skip_install = true
usedevelop = false

[testenv:docs]
description = Invoke sphinx-build to build the HTML docs
# doc requires py3 due to use of f'' strings and using only python3 as
# basepython risks using python3.4 which is not supported.
basepython = python3
passenv = *
usedevelop = False
commands_pre =
commands =
    python -m sphinx \
      -a -n -W \
      -b html --color \
      -d "{toxinidir}/docs/docstree" \
      docs/ "{toxinidir}/docs/docstree/html"

    # Print out the output docs dir and a way to serve html:
    python -c \
    'import pathlib; '\
    'docs_dir = pathlib.Path(r"{toxinidir}") / "docs/docstree/html"; index_file = docs_dir / "index.html"; print(f"\nDocumentation available under `file://\{index_file\}`\n\nTo serve docs, use `python3 -m http.server --directory \{docs_dir\} 0`\n")'
extras =
    docs

[testenv:docs-livereload]
description = Invoke sphinx-autobuild to build and reload the HTML docs
basepython = {[testenv:docs]basepython}
passenv = {[testenv:docs]passenv}
usedevelop = {[testenv:docs]usedevelop}
commands_pre =
commands =
    python -m sphinx_autobuild docs/ "{toxworkdir}/docs/html"
deps =
    sphinx-autobuild>=0.7.1,<1.0
extras =
    docs

[testenv:packaging]
description =
    Do packaging/distribution. If tag is not present or PEP440 compliant upload to
    PYPI could fail
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
# don't install molecule itself in this env
skip_install = true
deps =
    collective.checkdocs >= 0.2
    pep517 >= 0.8.2
    pip >= 20.2.2
    toml >= 0.10.1
    twine >= 3.2.0  # pyup: ignore
setenv =
commands_pre =
commands =
    rm -rfv {toxinidir}/dist/
    python -m pep517.build \
      --source \
      --binary \
      --out-dir {toxinidir}/dist/ \
      {toxinidir}
    # metadata validation
    sh -c "python -m twine check {toxinidir}/dist/*"
